<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
        $IP = MW_INSTALL_PATH;
} else {
        $IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '64M' );

if ( $wgCommandLineMode ) {
        if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
                die( "This script must be run from the command line\n" );
        }
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename         = "Illapedia";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
$wgScriptPath       = "/community/wiki";
//$wgArticlePath = "$wgScriptPath/$1";
$wgStylePath        = "$wgScriptPath/skins";
$wgScriptExtension  = ".php";

## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL

$wgEnableEmail      = true;
$wgEnableUserEmail  = true;

$wgEmergencyContact = "webmaster@illarion.org";
$wgPasswordSender = "webmaster@illarion.org";

## For a detailed description of the following switches see
## http://www.mediawiki.org/wiki/Extension:Email_notification 
## and http://www.mediawiki.org/wiki/Extension:Email_notification
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgDBtype           = "mysql";
$wgDBserver         = "localhost";
$wgDBname           = "illapedia";
$wgDBuser           = "wikiuser";
$wgDBpassword       = "=nK6Rd<6TBr-";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "TYPE=InnoDB";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

# Postgres specific settings
$wgDBport           = "5432";
$wgDBmwschema       = "mediawiki";
$wgDBts2schema      = "public";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "en";

$wgProxyKey = "aea46bd48d1a5825bf5d9c7f19d896bf74d25a043ca1da48a2e0daf18e5b036c";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
$wgDefaultSkin = 'monobook';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$configdate = gmdate( 'YmdHis', @filemtime( __FILE__ ) );
$wgCacheEpoch = max( $wgCacheEpoch, $configdate );

##################################################################
###################### CUSTOM #### SETTINGS ######################
##################################################################

## Wiki Logo - Uncomment and link to the custom logo
$wgLogo = "$wgScriptPath/images/e/e3/Illapedia.png";

## Server Time - Germany
$wgLocaltimezone = 'CET';
$wgLocalTZoffset = +60;

## Only use Illapedia skin (monobook)
$wgSkipSkins = array( "chick", "cologneblue", "myskin", "nostalgia", "simple", "modern", "standard" );

## Set to true to put the sending user's email in a Reply-To header instead of From.
##($wgEmergencyContact will be used as From.) Advantage: no direct spamfilterblock.
$wgUserEmailUseReplyTo = true;

## Default User Options http://www.mediawiki.org/wiki/Manual:%24wgDefaultUserOptions
$wgDefaultUserOptions['forceeditsummary'] = true;
$wgDefaultUserOptions['numberheadings'] = true;

###### Bug fixes ######
## Show detailed debugging information
# $wgShowExceptionDetails = true; # Only for debugging

## Illapedia skin fix
## $wgParserConf['class'] = 'Parser_OldPP';
$wgParserConf['class'] = 'Parser';

###### Extensions ######
## Nuke ##
 # Nuke MUST be after include DefaultSettings.php and before any other require or include
 # Usage http://www.mediawiki.org/wiki/Extension:Nuke
 # 1) Include script
  require_once( "extensions/Nuke/SpecialNuke.php" ); 
 # 2) Set rights
  $wgGroupPermissions['sysop']['nuke'] = true;

## Interwiki Table ##
require_once( "$IP/extensions/Interwiki/SpecialInterwiki.php" );
 # User permissions
  $wgGroupPermissions['*']['interwiki'] = false;
  $wgGroupPermissions['sysop']['interwiki'] = true;
 # Interwiki transcluding templates when 'Trans' is 1 in wikitable
  $wgEnableScaryTranscluding = true;

## SideBarExt ##
 # 1) Define (if desired) the base namespace where the pages will be fetched:
 #   $bwSidebarNs = NS_MEDIAWIKI;  // must be defined prior
 # 2) Define (if desired) the base page where the 'sidebar' pages will be fetched:
 #   $bwSidebarPage = Sidebar;
 # 3) Define the priority list i.e. group membership search order.
 #   $bwSidebarSearch = array ( 'sysop', 'user', '*' );
 #    Corresponding sidebar pages for $bwSidebarSearch:
       #   MediaWiki:Sidebar/sysop
       #   MediaWiki:Sidebar/user
       #   MediaWiki:Sidebar/*
 #    Per-User sidebars - Edit the page
       #   User:username/Sidebar
 #    Per-Namespace sidebars - Examples:
       #   MediaWiki:Sidebar/ns/main
       #   MediaWiki:Sidebar/ns/category
 # 4) Include the required scripts to run SideBarEx: 
 #   require_once( "$IP/extensions/StubManager/StubManager.php" );
 #   require_once( "$IP/extensions/SidebarEx/SidebarEx.php" );

## Extensions without settings ##
require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );
require_once( "$IP/extensions/ExpandTemplates/ExpandTemplates.php" );
require_once( "$IP/extensions/Renameuser/SpecialRenameuser.php" );
require_once( "$IP/extensions/Spoiler/Spoiler.php" );
require_once( "$IP/extensions/MultiUpload/SpecialMultipleUpload.php" );
require_once( "$IP/extensions/DismissableSiteNotice/DismissableSiteNotice.php" );

### Spam Management ###

 ## reCAPTCHA ##
  # 1) include script
   require_once( "$IP/extensions/recaptcha/ReCaptcha.php" );
  # 2) register keys
  ## illarion.org
  $recaptcha_public_key = '6LfzcQEAAAAAAB6og1DP8n8JtnvmA0q0PYcnsJuH';
  $recaptcha_private_key = '6LfzcQEAAAAAAJtNaFlj4E1UtW2Csrwb9WwkMWDK';
  /** 3)
   * The 'skipcaptcha' permission key can be given out to
   * let known-good users perform triggering actions without
   * having to go through the captcha.
   *
   * By default, sysops and registered bot accounts will be
   * able to skip, while others have to go through it.
   */
  $wgGroupPermissions['*'            ]['skipcaptcha'] = false;
  $wgGroupPermissions['user'         ]['skipcaptcha'] = false;
  $wgGroupPermissions['autoconfirmed']['skipcaptcha'] = false;
  $wgGroupPermissions['bot'          ]['skipcaptcha'] = true; // registered bots
  $wgGroupPermissions['sysop'        ]['skipcaptcha'] = true;
  /** 4)
   * Actions which can trigger a captcha
   *
   * If the 'edit' trigger is on, *every* edit will trigger the captcha.
   * This may be useful for protecting against vandalbot attacks.
   *
   * If using the default 'addurl' trigger, the captcha will trigger on
   * edits that include URLs that aren't in the current version of the page.
   * This should catch automated linkspammers without annoying people when
   * they make more typical edits.
   *
   * The captcha code should not use $wgCaptchaTriggers, but CaptchaTriggers()
   * which also takes into account per namespace triggering.
   */
  $wgCaptchaTriggers = array();
  $wgCaptchaTriggers['edit']          = false; // Would check on every edit
  $wgCaptchaTriggers['create']        = true;  // Check on page creation.
  $wgCaptchaTriggers['addurl']        = true;  // Check on edits that add URLs
  $wgCaptchaTriggers['createaccount'] = true;  // Special:Userlogin&type=signup
  $wgCaptchaTriggers['badlogin']      = true;  // Special:Userlogin after failure
  /** 5)
   * Allow users who have confirmed their e-mail addresses to post
   * URL links without being harassed by the captcha.
   */
  global $ceAllowConfirmedEmail;
  $ceAllowConfirmedEmail = true;

### Language Management ###

 ## Polyglot ##
   require_once( "$IP/extensions/Polyglot/Polyglot.php" );

 ## LanguageSelector ##
  # 1) Include script
  # require_once( "$IP/extensions/LanguageSelector/LanguageSelector.php" );
  # 2) Languages to be offered to the user for selection
  # $wgLanguageSelectorLanguages=array("en", "de");
  # 3) Language detection mode for anonymous visitors
  # $wgLanguageSelectorDetectLanguage = LANGUAGE_SELECTOR_PREFER_CONTENT_LANG;
  # 4)Where to inject the language selector widget
  # $wgLanguageSelectorLocation = LANGUAGE_SELECTOR_IN_TOOLBOX;

 ## Multilang ##
  # Include script
   require_once( "$IP/extensions/Multilang/Multilang.php" );
  # It is better not to use $wgMultilangUseBrowserLanguage
  # as this will cause confusion.

# end
$wgShowExceptionDetails = true;
